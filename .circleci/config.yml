# CircleCI 2.1 configuration file
# for ENCODE DNASE-SEQ-PIPELINE
# Maintainer: Otto Jolanki

# Defaults and functions
---
version: 2.1
defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/dnase-seq-pipeline

machine_defaults: &machine_defaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: ~/dnase-seq-pipeline

commands:
  set_environment_variables:
    description: "Set env for docker pushes and test runs"
    steps:
      - run:
          command: |
            echo "export DNASE_DOCKER_IMAGE_TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" >> ${BASH_ENV}
            echo "export CROMWELL=./cromwell-49.jar" >> ${BASH_ENV}
            echo "export WOMTOOL=./womtool-49.jar" >> ${BASH_ENV}
            source ${BASH_ENV}

  install_python_requirements:
    description: "Install pytest workflow requirements"
    steps:
      - run: pyenv global 3.7.0
      - run: pip install --upgrade pip
      - run: pip install -r requirements.txt

  install_bedops:
    description: "Install bedops for test output comparisons"
    steps:
      - download_file:
          file_url: "https://github.com/bedops/bedops/releases/download/v2.4.36/bedops_linux_x86_64-v2.4.36.tar.bz2"
      - run:
          command: |
            tar jxvf bedops_linux_x86_64-v2.4.36.tar.bz2
            sudo cp bin/* /usr/local/bin

  download_file:
    description: "Download a file using wget"
    parameters:
      file_url:
        type: string
    steps:
      - run: wget <<parameters.file_url>>

  prepare_pytest_environment:
    description: "Get machine ready to run pytest-workflow"
    steps:
      - set_environment_variables
      - install_python_requirements
      - install_bedops
      - download_file:
          file_url: "https://github.com/broadinstitute/cromwell/releases/download/49/cromwell-49.jar"
      - download_file:
          file_url: "https://github.com/broadinstitute/cromwell/releases/download/49/womtool-49.jar"

  run_test_tag:
    description: "Run tagged test"
    parameters:
      tag:
        type: string
      wt:
        type: string
      symlink:
        type: string
    steps:
      - run:
          command: pytest -v --tag <<parameters.tag>> --wt <<parameters.wt>> --symlink --kwd
          no_output_timeout: 60m

  install_git_lfs_and_get_data:
    steps:
      - run:
          command: |
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install git-lfs
            git lfs install
            git lfs pull


jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - set_environment_variables
      - run:
          name: build image
          command: |
            echo "pulling template!"
            docker pull quay.io/encode-dcc/dnase-seq-pipeline:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/dnase-seq-pipeline:template \
                --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} \
                --build-arg BRANCH=${CIRCLE_BRANCH} \
                --build-arg BUILD_DNASE_DOCKER_IMAGE_TAG=${DNASE_DOCKER_IMAGE_TAG} \
                -t $DNASE_DOCKER_IMAGE_TAG .
            docker push $DNASE_DOCKER_IMAGE_TAG
            docker logout
          no_output_timeout: 30m

  push_template:
      <<: *defaults
      steps:
        - checkout
        - setup_remote_docker
        - set_environment_variables
        - run:
            command: |
              docker pull $DNASE_DOCKER_IMAGE_TAG
              docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
              docker tag $DNASE_DOCKER_IMAGE_TAG quay.io/encode-dcc/dnase-seq-pipeline:template
              docker push quay.io/encode-dcc/dnase-seq-pipeline:template
              docker logout
            no_output_timeout: 30m

  wdl_unit_tests:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - install_git_lfs_and_get_data
      - run_test_tag:
          tag: "unit"
          wt: "4"

  wdl_integration_tests:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - install_git_lfs_and_get_data
      - run_test_tag:
          tag: "integration"
          wt: "4"

  wdl_functional_tests:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - install_git_lfs_and_get_data
      - run_test_tag:
          tag: "functional"
          wt: "4"

  wdl_full_tests:
    <<: *machine_defaults
    steps:
      - checkout
      - prepare_pytest_environment
      - install_git_lfs_and_get_data
      - run_test_tag:
          tag: "full"
          wt: "4"

# Workflow
workflows:
  build_workflow:
    jobs:
      - build
      - wdl_unit_tests:
          requires:
            - build
      - wdl_integration_tests:
          requires:
            - build
      - wdl_functional_tests:
          requires:
            - build
      - wdl_full_tests:
          requires:
            - build
      - push_template:
          requires:
            - wdl_unit_tests
            - wdl_integration_tests
            - wdl_functional_tests
            - wdl_full_tests            
